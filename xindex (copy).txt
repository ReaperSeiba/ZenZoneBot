const Discord = require("discord.js");
const { Client, GatewayIntentBits } = require("discord.js");

const client = new Discord.Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});
const prefix = "!"; // Your bot's prefix
const token = process.env["DISCORD_BOT_SECRET"];

client.on("ready", () => {
  console.log("ZenZoneBot is a ready to go Captain!");
  console.log("My current user name is : " + client.user.username);

  const channelId = "1220057482475339906";
  const channel = client.channels.cache.get(channelId);

  // Check if the channel exists
  if (!channel) {
    console.log("Channel not found.");
    return;
  }

  // Send a message to the channel
  channel.send("Hi! I'm alive! :3");
});

//Moderator Command List
const modCommands = [
  " !store", //stores an item requires 4 arguments enclosed in quotes
  " !edit",
  " !view",
  " !remove",
  " !addMod", // isMod = true;
  " !removeMod", // isMod = false;
  " !viewMod",
  " !deleteSuggestion",
  " !give",
  " !levelUp",
];
//User Private Command List
const userPrivateCommands = [" !suggest"];
//User Public Command List
const userPublicCommands = [" !share", " !inventory"];

// TEMPORARY DATA STORAGE ===========================================
//These formats will be used for a permanent Json file.

// items is an array of arrays, each array contains id#, name, description, image, levelUpID. ID# is its position in the items array. Example items[0] = [0, "Item Name", "Item Description", "Item Image", null]
const items = [];
//Users is an array of arrays containing user number, user id, self updating username, isMod, an array of items they have, and an array of known server display names capped 3. Example users[0] = [0, true, ["Item ID", "Item ID"]]
const users = [];

//BOT REQUIRED FUNCTIONS BELOW HERE===========================================================================

//BOT  LISTENING CODE BLOCK
client.on("messageCreate", (message) => {
  let botIsAuthor = message.author.bot ? true : false; //true if bot is nauthor and false if bot is not author
  if (botIsAuthor) {
    console.log("A bot tried to join the fun, bad bot!");
    return;
  }

  //Add new user to the user list or updates user display name
  if (isExistingUser(message.author.id, message)) {
    // console.log("User existed, updated users names as needed");
  } else {
    addNewUser(
      users.length,
      message.author.id,
      message.author.username,
      false,
      [],
      [],
      message,
    );
  }
  console.log(users); //logs the updated user list
  //checks if the message starts with the prefix to determine if it's a command

  if (!message.content.startsWith(prefix)) {
    // Log message content
    // console.log("Message Content:", message.content);
    // console.log("Not a command");
    return;
  }

  // Extract command and arguments
  const { command, args } = parseCommand(
    message.content.slice(prefix.length).trim(),
  );

  // Log command and arguments
  console.log("Command:", command);
  console.log("Arguments:", args);

  // INSERT MOD WHITELIST CHECK HERE!!!
  runCommand(command, message, args);
});

// FUNCTION THAT PARSES INPUT INTO LOWERCASE COMMANDS AND DETERMINES ARGUMENTS BASED ON "".
function parseCommand(content) {
  const parts = content.match(/"([^"]+)"|\S+/g) || []; // Match quoted and unquoted parts
  const command = parts.shift().toLowerCase(); // Extract and lowercase the command
  const args = parts.filter((arg) => arg.startsWith('"') && arg.endsWith('"')); // Filter only quoted arguments
  return { command, args };
}

// SWITCH STATEMENT THAT RUNS COMMANDS BASED ON COMMAND NAME PARSED FROM parseCommand().
function runCommand(command, message, args) {
  console.log("Running command:", command);

  switch (command) {
    case "store":
      handleStoreCommand(message, args);
      break;
    case "help":
      handleHelpCommand(message);
      break;
    case "modhelp":
      handleModHelpCommand(message);
      break;
    case "edit":
      handleEditCommand(message, args);
      break;
    case "view":
      handleViewCommand(message, args);
      break;
    case "remove":
      handleRemoveCommand(message, args);
      break;
    case "addmod":
      handleModStatusCommand(message, args);
      break;
    case "removemod":
      handleModStatusCommand(message);
      break;
    case "viewmod":
      handleViewModCommand(message);
      break;
    case "deletesuggestion":
      handleDeleteSuggestionCommand(message);
      break;
    case "give":
      handleGiveCommand(message);
      break;
    case "suggest":
      handleSuggestCommand(message);
      break;
    case "share":
      handleShareCommand(message);
      break;
    case "inventory":
      handleInventoryCommand(message);
      break;
    case "levelup":
      handleLevelUpCommand(message);
      break;
    // Add more cases for other commands if needed
    default:
      message.channel.send("Invalid command.");
  }
}
//Checks if a user exists and creates a new user if they do not. Will update the user's last known display names if they do exist.
function addNewUser(
  userIndex,
  userID,
  username,
  modStatus,
  items,
  displayNames,
  message,
) {
  let currentDisplayName = message.guild.members.cache.get(userID).displayName;
  const argsArray = Array.prototype.slice.call(arguments, 0, -1);
  users.push(argsArray);
  displayNames.unshift(currentDisplayName);
  // console.log(
  //   ` This is ${message.author.username}'s user ID, they are a new user and have been logged!'`,
  // );
}

//cycles through users list to determine if userID exists, if it exists it will check to see if the user's username and display name has updated
function isExistingUser(userID, message) {
  let currentDisplayName = message.guild.members.cache.get(
    message.author.id,
  ).displayName;
  for (let i = 0; i < users.length; i++) {
    if (users[i][1] === userID) {
      if (users[i][2] !== message.author.username) {
        // console.log(
        //   message.author.username +
        //     " Username Changed and updated! We see you ^_^",
        // );
        users[i][2] = message.author.username;
      }
      if (!users[i][5].includes(currentDisplayName)) {
        users[i][5].unshift(currentDisplayName);
        // console.log(
        //   users[i][5] + " Display Name Changed and updated! We see you ^_^",
        // );
        if (users[i][5].length > 3) {
          users[i][5].pop();
          //console.log("Removed a last known display name!");
        }
      }
      //console.log("Found an existing user! :3");
      return true;
    }
  }
}

//COMMAND FUNCTIONS BELOW HERE ====================================================================

//MODERATOR COMMANDS Viewable only to the moderator who calls OR viewable only in a specific channel? -------------------------------------
// displays a list of Mod only commands
function handleModHelpCommand(message) {
  message.channel.send(
    `Hi here is a list of all moderator commands: ${modCommands}`,
  );
}
//stores a new item in memory with 4 arguments
function handleStoreCommand(message, args) {
  console.log("Handling store command with arguments:", args);

  // Ensure at least 4 arguments are present
  if (args.length >= 4) {
    message.channel.send(`Elements stored: ${args.join(", ")}`);
  } else {
    message.channel.send(
      "Invalid command. Please provide the 4 required elements (Name, Description, Image, LevelUpID) enclosed in quotes.",
    );
  }
}
//edits an item in memory
function handleEditCommand(message) {}
//views an item in memory
function handleViewCommand(message) {}
//removes an item in memory
function handleRemoveCommand(message) {}
//used in both remove and add mod to change moderator status
function handleModStatusCommand(message, userID) {}
//views moderator list
function handleViewModCommand(message) {}
//deletes a suggestion @ index
function handleDeleteSuggestionCommand(message) {}
//gives an item to a user
function handleGiveCommand(message) {}
//level up an item
function handleLevelUpCommand(message) {}

//USER PRIVATE COMMAND AND FUNCTIONS BELOW HERE (Viewable only to user who calls) --------------------------------------------------------

//Use "!help" to display a list of user commands
function handleHelpCommand(message) {
  message.channel.send(
    `Hi here is a list of all private commands with responses visible only to you: ${userPrivateCommands} and here is a list of all public commands visible to others ${userPublicCommands}`,
  );
}

//Use !suggest to suggest an item (requires 4 arguments)
function handleSuggestCommand(message, args) {}

//USER PUBLIC COMMAND AND FUNCTIONS BELOW HERE (Viewable to all in server) ---------------------------------------------------------

//Use !share to share an item publicly
function handleShareCommand(message) {}
//Use ! inventory to view your inventory
function handleInventoryCommand(message) {}

client.login(token);
